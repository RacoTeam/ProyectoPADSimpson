@page "/Frase/delete/{FraseId:int}"
@inject HttpClient Http

@using ProyectoPADSimpson.Client.Services;
@using ProyectoPADSimpson.Shared.Models

@inject NavigationManager NavigationManager

@inject IFraseServicio _fraseServicio

<style>
    body {
        background: rgb(9,141,227);
        background: linear-gradient(180deg, rgba(9,141,227,1) 0%, rgba(91,160,187,1) 100%);
    }
</style>

<h2>Eliminar frase</h2>
<br />
<div class="form-group">
    <h4>Quieres eliminar la frase?</h4>
    <table class="table">
        <tbody>
            <tr>
                <td>Id</td>
                <td>@Frase.Id</td>
            </tr>
            <tr>
                <td>Texto</td>
                <td>@Frase.Texto</td>
            </tr>
            <tr>
                <td>Personaje</td>
                <td>@Frase.Personaje</td>
            </tr>
            <tr>
                <td>Capitulo</td>
                <td>@Frase.Episodio</td>
            </tr>
            <tr>
                <td>IdUsuario</td>
                <td>@Frase.IdUsuario</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="form-group">
    <input type="submit" value="Delete" @onclick="(async () => await RemoveFrase(Frase.Id))" class="btn btn-danger" />
    <input type="submit" value="Cancel" @onclick="(() => Cancel())" class="btn btn-warning" />
</div>

@code {
    [Parameter]
    public int FraseId { get; set; }
    FraseDTO Frase = new FraseDTO();
    protected override async Task OnInitializedAsync()
    {
        Frase = await _fraseServicio.ObtenerFrase(FraseId);
    }

    protected async Task RemoveFrase(int FraseID)
    {
        await _fraseServicio.EliminarFrase(FraseID);
        NavigationManager.NavigateTo("/fetchfrasedetails");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/fetchfrasedetails");
    }
}