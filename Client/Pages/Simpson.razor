@page "/"
@page "/simpson"
@inject HttpClient Http
@inject NavigationManager _navigationManager

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@using ProyectoPADSimpson.Shared.Models;
@using ProyectoPADSimpson.Client.Services;

@inject IFraseServicio _fraseServicio
@inject NavigationManager _navServicio
@inject IToastService _toastServicio

<PageTitle>Buscador de Frases</PageTitle>

<style>
    body {
        background: rgb(9,141,227);
        background: linear-gradient(180deg, rgba(9,141,227,1) 0%, rgba(91,160,187,1) 100%);
    }
</style>

<div class="main">
    <h3 id="page-title">Frases de los Simpsons</h3>
    <div class="form-container">
        <div>
            <h4 class="section-title">Buscar por Personaje</h4>

            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="floatingInput" @bind-value="nombrePersonaje" placeholder="Bart Simpson">
                <label for="floatingInput">Nombre del personaje</label>
            </div>


            @if (string.IsNullOrEmpty(nombrePersonaje) && nombrePersonajeInvalido)
            {
                <div class="error-container">
                    <i class="bi bi-exclamation-circle-fill Error"></i>
                    <p class="Error">Ingrese el nombre del personaje.</p>
                </div>
            }

            <div class="form-floating mb-3">
                <input type="number" class="form-control" id="floatingInput" @bind-value="cantidadFrase" placeholder="1">
                <label for="floatingInput">Cantidad de frases</label>
            </div>
            @if (cantidadInvalida)
            {
                <div class="error-container">
                    <i class="bi bi-exclamation-circle-fill Error"></i>
                    <p class="Error">Ingrese el nombre del personaje.</p>
                </div>
            }
            <br />
            <button class="btn btn-primary" @onclick="(async()=> await GenerarFrase())">Generar Frase/s</button>
        </div>
        <div>
            <h4 class="section-title">Frase Aleatoria</h4>
            <button class="btn btn-primary" @onclick="(async()=> await GenerarFraseAleatoria())">Generar Frase Aleatoria</button>
        </div>
    </div>

    <div hidden="@ocultarLoader">
        <h2 class="section-title">Cargando...</h2>
        <img id="loader" src="@gifLoader" />
    </div>

    <div class="results-container" hidden="@(!ocultarLoader || primerInicio)">
        @if (frasesAgrupadas == null || !frasesAgrupadas.Any() && (busquedaBandera))
        {
            <p class="Error">No se encontraron personajes.</p>
        }

        <div>
            @if (listaFrases != null && listaEpisodios != null)
            {
                @foreach (var frasesPorPersonaje in frasesAgrupadas)
                {
                    <div>
                        <h4 id="nombre-personaje">@frasesPorPersonaje.Key</h4>
                        <img src="@frasesPorPersonaje.First().image" width="100" style="margin: 10px;" />

                        <div class="row">
                            @foreach (var frase in frasesPorPersonaje)
                            {
                                int index = listaFrases.IndexOf(frase);
                                Episodio episodio = listaEpisodios.ElementAtOrDefault(index);

                                bool esFavorito = estadoFavoritos.ContainsKey(frase.quote) && estadoFavoritos[frase.quote].EsFavorito;

                                if (episodio != null)
                                {
                                    <div class="col-md-4">
                                        <div class="card" style="margin: 50px;">
                                            <img src="@("https://frinkiac.com/img/" + episodio.episode + "/" + episodio.timestamp)" class="card-img-top" alt="Episodio" style="object-fit: cover;">
                                            <div class="card-body">
                                                <p class="card-text">@frase.quote</p>
                                                @if (esFavorito)
                                                {
                                                    <button type="button" class="btn btn-success" @onclick="(async () => await BorrarFavorito(frase, episodio, esFavorito))">
                                                        Favorito Guardado<i class="bi bi-check"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button type="button" class="btn btn-warning" @onclick="(async () => await GuardarFavorito(frase, episodio, esFavorito))">
                                                        Añadir Favorito<i class="bi bi-star"></i>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    public class Frase
    {
        public String? quote { get; set; }
        public String? character { get; set; }
        public String? image { get; set; }
        public String? characterDirection { get; set; }
    }

    public class Episodio
    {
        public int? id { get; set; }
        public String? episode { get; set; }
        public int? timestamp { get; set; }
    }

    public class FavoritoRequest
    {
        public String? Texto { get; set; }
        public String? Personaje { get; set; }
        public Episodio? Episodio { get; set; }
        public int? IdUsuario { get; set; }
    }

    List<Frase>? listaFrases { get; set; }
    List<Episodio>? listaEpisodios { get; set; }
    Frase? frase { get; set; }

    String? nombrePersonaje { get; set; }
    int cantidadFrase = 1;
    bool nombrePersonajeInvalido = false;
    bool cantidadInvalida = false;
    bool busquedaBandera = false;

    String? gifLoader { get; set; }
    private bool ocultarLoader { get; set; } = true;
    private bool primerInicio { get; set; } = true;

    Dictionary<string, FavoritoInfo> estadoFavoritos = new Dictionary<string, FavoritoInfo>();

    public class FavoritoInfo
    {
        public bool EsFavorito { get; set; }
        public int IdFavorito { get; set; }
    }

    IEnumerable<IGrouping<string?, Frase>> frasesAgrupadas = Enumerable.Empty<IGrouping<string?, Frase>>();

    protected override async Task OnInitializedAsync()
    {
        await ObtenerGif();
        await CargarFavoritos();
    }

    protected async Task ObtenerGif()
    {
        var response = await Http.GetStringAsync("https://api.giphy.com/v1/gifs/random?api_key=FAp8LREU0hvkH0DdmwSu2T2qcqUB12hl&tag=los+simpsons&rating=g");
        if (response != null)
        {
            var data = (JObject)JsonConvert.DeserializeObject(response);
            gifLoader = data.SelectToken(
               "data.images.original.url").Value<string>();
        }
    }

    protected async Task GenerarFrase()
    {
        // Reviso que las entradas tengan valor y no esten vacias
        if (nombrePersonaje == null)
        {
            nombrePersonajeInvalido = true;
            return;
        }
        nombrePersonajeInvalido = false;

        if (cantidadFrase == 0)
        {
            cantidadInvalida = true;
            return;
        }

        ocultarLoader = false;

        if (cantidadFrase == 1)
        {
            listaFrases = await Http.GetFromJsonAsync<List<Frase>>("https://thesimpsonsquoteapi.glitch.me/quotes?character=" + nombrePersonaje);
        }
        else if (cantidadFrase > 1)
        {
            listaFrases = await Http.GetFromJsonAsync<List<Frase>>("https://thesimpsonsquoteapi.glitch.me/quotes?count=" + cantidadFrase + "&character=" + nombrePersonaje);
        }
        cantidadInvalida = false;

        // Limpio el input
        nombrePersonaje = null;

        busquedaBandera = true;

        // Obtengo los episodios donde aparece cada frase
        listaEpisodios = null;

        foreach (var result in listaFrases)
        {
            var primerEpisodio = await ObtenerEpisodio("https://corsproxy.io/?https://frinkiac.com/api/search?q=" + result.quote);

            // Agregar el primer episodio a la lista
            if (primerEpisodio != null)
            {
                if (listaEpisodios == null)
                {
                    listaEpisodios = new List<Episodio>();
                }

                listaEpisodios.Add(primerEpisodio);
            }
        }

        frasesAgrupadas = listaFrases.GroupBy(q => q.character);

        ocultarLoader = true;
        primerInicio = false;

        _navigationManager.NavigateTo("simpson");
    }

    protected async Task GenerarFraseAleatoria()
    {
        ocultarLoader = false;

        listaFrases = await Http.GetFromJsonAsync<List<Frase>>("https://thesimpsonsquoteapi.glitch.me/quotes");
        frase = listaFrases?.FirstOrDefault();
        listaEpisodios = null;

        if (frase != null)
        {
            var primerEpisodio = await ObtenerEpisodio("https://corsproxy.io/?https://frinkiac.com/api/search?q=" + frase.quote);

            // Agregar el primer episodio
            if (primerEpisodio != null)
            {
                if (listaEpisodios == null)
                {
                    listaEpisodios = new List<Episodio>();
                }

                listaEpisodios.Add(primerEpisodio);
            }
        }
        frasesAgrupadas = listaFrases.GroupBy(q => q.character);

        ocultarLoader = true;
        primerInicio = false;

        _navigationManager.NavigateTo("simpson");
    }

    protected async Task<Episodio?> ObtenerEpisodio(string query)
    {
        var episodios = await Http.GetFromJsonAsync<List<Episodio>>(query);

        var resultado = episodios?.FirstOrDefault();

        return resultado;
    }

    protected async Task CargarFavoritos()
    {
        try
        {
            var response = await _fraseServicio.ObtenerFrasesDelUsuario(1);

            foreach(FraseDTO fraseFav in response)
            {
                estadoFavoritos[fraseFav.Texto] = new FavoritoInfo
                {
                        EsFavorito = true,
                        IdFavorito = fraseFav.Id
                };
            }

            _toastServicio.ShowSuccess("Se cargaron tus favoritos.");
        }
        catch
        {
            _toastServicio.ShowError("No se pudieron cargar frases favoritas.");
        }
    }

    protected async Task GuardarFavorito(Frase fraseFavorita, Episodio episodioFraseFavorita, bool esFavorito)
    {
        if (!esFavorito)
        {
            if (fraseFavorita != null)
            {
                var favoritoDTO = new FraseDTO
                    {
                        Texto = fraseFavorita.quote,
                        Personaje = fraseFavorita.character,
                        Episodio = episodioFraseFavorita.episode,
                        IdUsuario = 1
                    };

                try
                {
                    var response = await _fraseServicio.AgregarFrase(favoritoDTO);
                    estadoFavoritos[fraseFavorita.quote] = new FavoritoInfo
                    {
                        EsFavorito = true,
                        IdFavorito = response
                    };

                    _toastServicio.ShowSuccess("Se agregó a favoritos.");
                }
                catch
                {
                    _toastServicio.ShowError("No se pudo agregar a favoritos. Intente más tarde.");
                }
            }
        }
    }

    protected async Task BorrarFavorito(Frase fraseFavorita, Episodio episodioFraseFavorita, bool esFavorito)
    {
        if (esFavorito)
        {
            if (fraseFavorita != null)
            {
                var favoritoDTO = new FraseDTO
                    {
                        Texto = fraseFavorita.quote,
                        Personaje = fraseFavorita.character,
                        Episodio = episodioFraseFavorita.episode,
                        IdUsuario = 1
                    };

                try
                {
                    var response = await _fraseServicio.EliminarFrase(estadoFavoritos[fraseFavorita.quote].IdFavorito);
                    estadoFavoritos[fraseFavorita.quote].EsFavorito = false;

                    _toastServicio.ShowSuccess("Se eliminó de favoritos.");
                }
                catch
                {
                    _toastServicio.ShowError("No se pudo eliminar de favoritos. Intente más tarde.");
                }
            }
        }
    }
}
