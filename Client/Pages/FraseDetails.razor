@page "/fetchfrasedetails"
@inject HttpClient Http

@using ProyectoPADSimpson.Shared.Models;
@using ProyectoPADSimpson.Client.Services;

@inject IFraseServicio _fraseServicio
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<style>
    body {
        background: linear-gradient(180deg, rgba(9,141,227,1) 0%, rgba(91,160,187,1) 100%);
        color: white;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }
</style>

<h1 class="Title">Frases Favoritas</h1>
<p>Aquí puedes ver tus frases guardadas y eliminarlas.</p>
<div class="row" hidden="@estaOculta">
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Buscar frase por texto"
        @bind="SearchString" @bind:event="oninput" @onkeyup="FilterFrase" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (!FraseList.Any())
{
    <p><em>@estado</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered" hidden="@estaOculta">
        <thead class="table-warning">
            <tr>
                <th>Frase</th>
                <th>Personaje</th>
                <th>Capítulo</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Frase in FraseList)
            {
                <tr>
                    <td>@Frase.Texto</td>
                    <td>@Frase.Personaje</td>
                    <td>@Frase.Episodio</td>
                    <td>
                        <a href='/Frase/delete/@Frase.Id' class="btn btn-outline-danger" role="button">
                            Eliminar
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    protected List<FraseDTO> FraseList = new();
    protected List<FraseDTO> searchFraseData = new();
    protected FraseDTO Frase = new();
    protected string SearchString { get; set; } = string.Empty;

    public string estado = "Cargando...";
    public bool estaOculta = true;

    public int usuario_id;

    protected override async Task OnInitializedAsync()
    {
        usuario_id = await sessionStorage.GetItemAsync<int>("id");

        if (usuario_id != 0)
        {
            estado = "Cargando...";
            await GetFrase();
        }
        else
        {
            estaOculta = true;
            estado = "Inicie sesión para mostrar sus frases";
        }
    }

    protected async Task GetFrase()
    {
        try
        {
            FraseList = await _fraseServicio.ObtenerFrasesDelUsuario(usuario_id);
        }
        catch
        {
            estado = "Cuando cargues una frase podras verla aquí.";
        }

        searchFraseData = FraseList;

        if (await sessionStorage.ContainKeyAsync("usuario_lista_favoritas"))
        {
            await sessionStorage.SetItemAsync<List<FraseDTO>>("usuario_frases_favoritas", FraseList);
        }

        estaOculta = false;
    }

    protected void FilterFrase()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            FraseList = searchFraseData
                .Where(x => x.Texto.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            FraseList = searchFraseData;
        }
    }

    protected void DeleteConfirm(int FraseID)
    {
        Frase = FraseList.FirstOrDefault(x => x.Id == FraseID);
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        FraseList = searchFraseData;
    }
}